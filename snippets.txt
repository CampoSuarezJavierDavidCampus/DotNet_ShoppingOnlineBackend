{
	// Place your snippets for csharp here. Each snippet is defined under a snippet name and has a prefix, body and 
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	// same ids are connected.
	// Example:
	// "Print to console": {
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }

	"Controller-Structure":{
		"prefix": "controller-structure",
		"body":[
			"using Api.Controllers;",
			"using Api.Dtos;",
			"using AutoMapper;",
			"using Domain.Entities;",,
			"using API.Helpers;",
			"using Dominio.Interfaces.Pager;",
			"using Domain.Interfaces;",
			"using Microsoft.AspNetCore.Mvc;",
			"using Microsoft.AspNetCore.Authorization;",
			"",
			"namespace ApiIncidencias.Controllers;",
			"[ApiVersion(\"1.0\")]",
			"public class ${1:Entity}Controller : BaseApiController{",
			"    private readonly IUnitOfWork _UnitOfWork;",
			"    private readonly IMapper _Mapper;",
			"",
			"    public ${1:Entity}Controller (IUnitOfWork unitOfWork,IMapper mapper){",			
			"        _UnitOfWork = unitOfWork;",
			"        _Mapper = mapper;",
			"    }",
			"",
			"    [HttpGet]",
			"    //[Authorize]",
			"    [MapToApiVersion(\"1.0\")]",
			"    [ProducesResponseType(StatusCodes.Status200OK)]",
			"    [ProducesResponseType(StatusCodes.Status400BadRequest)]",
			"    public async Task<IEnumerable<${3:DtoEntity}>> Get(){",			
			"       var records = await _UnitOfWork.${2:Entities}.GetAllAsync();",
			"       return _Mapper.Map<List<${3:DtoEntity}>>(records);",
			"    }",
			"",
			"    [HttpGet(\"{id}\")]",
			"    [Authorize]",
			"    [MapToApiVersion(\"1.0\")]",
			"    [ProducesResponseType(StatusCodes.Status200OK)]",
			"    [ProducesResponseType(StatusCodes.Status400BadRequest)]",
			"    public async Task<ActionResult<${8:Entity}WithIdDto>> Get(${4|int,string|} id){",			                
			"       var record = await _UnitOfWork.${2:Entities}.GetByIdAsync(id);",
			"       if (record == null){",
			"           return NotFound();",
			"       }",
			"       return _Mapper.Map<${8:Entity}WithIdDto>(record);",
			"    }",
			"",
			"    [HttpGet]",
			"    [MapToApiVersion(\"1.1\")]",
			"    [ProducesResponseType(StatusCodes.Status200OK)]",
			"    [ProducesResponseType(StatusCodes.Status400BadRequest)]",
			"    public async Task<ActionResult<Pager<${3:DtoEntity}>>> Get11([FromQuery] Params conf){",
			"       var param = new Param(conf);",
			"       var records = await _UnitOfWork.${2:Entities}.GetAllAsync(param);",
			"       var recordDtos = _Mapper.Map<List<${3:DtoEntity}>>(records);",
			"       IPager<${3:DtoEntity}> pager = new Pager<${3:DtoEntity}>(recordDtos,records?.Count(),param) ;",
			"       return Ok(pager);",
			"    }",
			"",
			"    [HttpPost]",
			"    [ProducesResponseType(StatusCodes.Status201Created)]",
			"    [ProducesResponseType(StatusCodes.Status400BadRequest)]",
			"    public async Task<ActionResult<${3:DtoEntity}>> Post(${3:DtoEntity} recordDto){",
			"       var record = _Mapper.Map<${8:Entity}>(recordDto);",
			"       _UnitOfWork.${2:Entities}.Add(record);",
			"       await _UnitOfWork.SaveChanges();",
			"       if (record == null){",			
			"           return BadRequest();",
			"       }",			
			"       return CreatedAtAction(nameof(Post),new {id= record.Id, recordDto});",
			"    }",
			"",
			"    [HttpPut(\"{id}\")]",
			"    [MapToApiVersion(\"1.0\")]",
			"    [ProducesResponseType(StatusCodes.Status200OK)]",
			"    [ProducesResponseType(StatusCodes.Status404NotFound)]",
			"    [ProducesResponseType(StatusCodes.Status400BadRequest)]",
			"    public async Task<ActionResult<${3:DtoEntity}>> Put(${4|int,string|} id, [FromBody]${3:DtoEntity}? recordDto){",
			"       if(recordDto == null)",
			"           return NotFound();",
			"       var record = _Mapper.Map<${8:Entity}>(recordDto);",
			"       record.Id = id;",
			"       _UnitOfWork.${2:Entities}.Update(record);",
			"       await _UnitOfWork.SaveChanges();",
			"       return recordDto;",
			"    }",
			"",
			"    [HttpDelete(\"{id}\")]",
			"    [MapToApiVersion(\"1.0\")]",
			"    [ProducesResponseType(StatusCodes.Status204NoContent)]",
			"    [ProducesResponseType(StatusCodes.Status404NotFound)]",
			"    public async Task<IActionResult> Delete(${4|int,string|} id){",
			"       var record = await _UnitOfWork.${2:Entities}.GetByIdAsync(id);",
			"       if(record == null){",
			"           return NotFound();",
			"       }",
			"       _UnitOfWork.${2:Entities}.Remove(record);",
			"       await _UnitOfWork.SaveChanges();",
			"       return NoContent();",
			"    }",
			"}",
		],
		"description": "create the basic structure to create a controller"
	},
	"Auto-Increment-Configuration-Property":{
		"prefix":"conf-prop-auto-increment",
		"body":[
			"builder.Property(x => x.Id)",
			"\t.IsRequired()",
			"\t.HasAnnotation(\"MySql:ValueGenerationStrategy\", MySqlValueGenerationStrategy.IdentityColumn)",
			"\t.HasColumnName(\"idPk\");\n",
			"$0"
		],
		"description":"Create a autoincrement configuration property"
	},
	"many-to-many-property-configuration":{
		"prefix":"conf-prop-many-to-many",
		"body":[
			"builder.HasMany(p => p.${1:PluralProperyA})",
			"\t.WithMany(p => p.${2:PluralProperyB})",
			"\t.UsingEntity<${3:PropertyC}>(",
			"\t\tt => t.HasOne(j => j.${4:PropertyA})",
			"\t\t\t.WithMany(j => j.${3:PropertyC})",
			"\t\t\t.HasForeignKey(j => j.${4:PropertyA}Id),",
			"\t\tt => t.HasOne(j => j.${5:PropertyB})",
			"\t\t\t.WithMany(j => j.${3:PropertyC})",
			"\t\t\t.HasForeignKey(j => j.${5:PropertyB}Id),",
			"\t\tt => {//--Configurations",
			"\t\t\tt.ToTable(\"${6:TableName}\");",
			"\t\t\tt.HasKey(j => new{j.${4:PropertyA}Id,j.${5:PropertyB}Id});",
			"\n\t\t\t$0",
			"\t\t}",
			"\t);"
		],
		"description":"Create configure many to many relationship properties"
	},
	"maxlength-configuration-property":{
		"prefix":"conf-prop-maxlength",
		"body":[
			"builder.Property(x => x.${1:property})",
			"\t.IsRequired()",
			"\t.HasColumnName(\"${2:propertyName}${3:Table}\")",
			"\t.HasMaxLength(${4|50,100,200,250|});\n",
			"$0"
		],
		"description":"create a configuration property with max lenght"
	},
	"UniqueIndex-configuration-property":{
		"prefix":"conf-prop-uniqueIndex",
		"body":[
			"builder.HasIndex(p => new{",
			"\tp.${1:property1},p.${2:property2}",
			"})",
			".HasDatabaseName(\"IX_${1:property1}_${2:property2}\")",
			".IsUnique();\n",
			"$0"
		],
		"description":"Create a unique index"
	},
	"Simple-Configuration":{
		"prefix":"simple-conf",
		"body":[
			"using Core.Entities;",
			"using Microsoft.EntityFrameworkCore;",
			"using Microsoft.EntityFrameworkCore.Metadata.Builders;",
			"\nnamespace Persistence.Data.Configurations;",
			"public class ${1:Entity}Configuration : IEntityTypeConfiguration<${1:Entity}>{",
			"\tpublic void Configure(EntityTypeBuilder<${1:Entity}> builder){",
			"\t\tbuilder.ToTable(\"${2:TableName}\");",
			"\t\tbuilder.HasKey(x => x.Id);",
			"\t\t$0",
			"\t}",
			"}"
		],
		"description":"Create a simple Configuration"
	},
	"Many-To-Many-Entity":{
		"prefix":"Many-To-Many-Entity",
		"body":[
			"namespace Domain.Entities;",
			"public class ${1:Entity}${3:PluralEntityB}{",
			"\tpublic int ${2:EntityB}Id { get; set; }",
			"\tpublic ${2:EntityB}? ${2:EntityB} { get; set; }",
			"",
			"\tpublic int ${1:Entity}Id { get; set; }",
			"\tpublic ${1:Entity}? ${1:Entity} { get; set; }",
			"}"
		],
		"description":"Create many to many relationship."
	},
	"Mapping-Class":{
		"prefix": "Mapping-Class",
		"body": [
			"using Api.Dtos;",
			"using AutoMapper;",
			"using Domain.Entities;",
			"namespace Api.Profiles;",
			"public class Mapping${1:Entity}Profile: Profile{",
			"   public Mapping${1:Entity}Profile(){",
			"       CreateMap<${2:EntityDto},${1:Entity}>()",
			"           .ReverseMap();",
			"    }",
			"}"
		],
		"description": "this snipper will create a new basic profile class"
	},
	"Dbset-property":{
		"prefix":"prop-DbSet",
		"body":[
			"public DbSet<${1:Entity}> ${2:PluralEntity} { get; set; }",
		],
		"description":"Create a DbSet property"
	},
	"Empty-String-Property":{
		"prefix":"prop-empty-string",
		"body":[
			"public string ${1:property} { get; set; } = String.Empty;"
		],
		"description":"Create a string.Empty prop"
	},
	"Many-To-Many-Property":{
		"prefix":"prop-many-to-many",
		"body":[
			"public IEnumerable<${1:EntityA}> ${3:PluralEntityA} { get; set; } = new HashSet<${1:EntityA}>();",
			"public IEnumerable<${2:EntityC}> ${4:PluralEntityC} { get; set; } = new HashSet<${2:EntityC}>();",
		],
		"description":"Create many to many relationship property"
	},
	"One-To-Many-Property":{
		"prefix":"prop-one-to-many",
		"body":[
			"public ${1|int,string|} ${2:property}Id { get; set; }",
			"public ${2:property}? ${2:property} {get;set;}"
		],
		"description":"Create One to many property"
	},
	"Simple-Entity":{
		"prefix":"Simple-Entity",
		"body":[
			"using Domain.Entities.Generics;",
			"",
			"namespace Domain.Entities;",
			"public class ${1:entity}: BaseEntityWith${2|Int,String|}Id{",
			"\t${0}",
			"}"
		],
		"description":"Create Simple Entity"
	},
	"many-To-One-property":{
		"prefix":"prop-many-to-one",
		"body":[
			"public IEnumerable<${1:EntityA}> ${3:PluralEntityA} { get; set; } = new HashSet<${1:EntityA}>();",
		],
		"description":"create a one to many relationship property"
	},
	"many-to-one-configuration-property":{
		"prefix":"conf-prop-many-to-one",
		"body":[
			"builder.HasOne(x => x.${1:propertyA})",
			"\t.WithMany(x => x.${2:propertyB})",
			"\t.HasForeignKey(x => x.${1:propertyA}Id);",
			"\n$0"
		],
		"description":"create a configuration for many to one relationship property"
	},
	"Simple-Interface":{
		"prefix":"Simple-Interface",
		"body":[
			"using Domain.Entities;",
			"using Domain.Interfaces.Generics.GenericById;",
			"\nnamespace Domain.Interfaces;",
			"public interface I${1:Entity}Repository: IGenericRepository${2|Int,String|}Id<${1:Entity}>{}"
		],
		"description":"Create a simple interfaz"
	},
	"Simple-Repository":{
		"prefix":"Simple-Repository",
		"body":[
			"using Application.Repositories.Generics.GenericById;",
			"using Domain.Entities;",
			"using Domain.Interfaces;",
			"using Persistence;",
			"\nnamespace Application.Repositories;",
			"public sealed class ${1:Entity}Repository : GenericRepository${2|Int,String|}Id<${1:Entity}>, I${1:Entity}Repository{",
			"\tpublic ${1:Entity}Repository(DataContext context) : base(context){}",
			"}"
		],
		"description":"Create a simple Repository"
	},
	"UnitOfWork-Repository-property":{
		"prefix":"prop-UnitOfWork-Repository",
		"body":[
			"public I${1:Property}Repository ${2:PluralProperty} => _${1:Property} ??= _${1:Property} = new ${1:Property}Repository(_Context);"
		],
		"description":"Create a new simpleton for UnitOfWork"
	},
	"DtoWithId":{		
		"prefix":"simple-dto-with-id",
		"body":[
			"using System.ComponentModel.DataAnnotations;",
			"namespace Api.Dtos;",
			"public class ${1:entity}DtosWithId: ${1:entity}Dto{",
			"\t[Required]",			
			"\tpublic ${2|int,string|} Id { get; set; } ${3| , = String.Empty |}",
			"}"
		],
		"description":"Create a simple structure of dto with id"
	},
	"Simple-Dto":{
		"prefix":"simple-dto",
		"body":[
			"namespace Api.Dtos;",
			"public class ${1:Entity}Dto{",
			"\t$0",
			"}"
		],
		"description":"Create A simple Dto structure"
	}
}